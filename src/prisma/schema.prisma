generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model User {
    id    String  @id @default(uuid())
    name  String?
    email String  @unique
    image String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    terms Term[]
    tasks Task[] // reference all tasks as they may not always store a courseId
}

model Term {
    id    String   @id @default(uuid())
    name  String
    start DateTime
    end   DateTime

    vacations TermVacation[]

    courses Course[]

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}

model TermVacation {
    id    String   @id @default(uuid())
    name  String
    start DateTime
    end   DateTime

    term   Term   @relation(fields: [termId], references: [id], onDelete: Cascade)
    termId String
}

model Course {
    id         String  @id @default(uuid())
    name       String
    color      String
    instructor String?
    location   String?

    times CourseTime[]

    tasks Task[]

    term   Term   @relation(fields: [termId], references: [id], onDelete: Cascade)
    termId String
}

model CourseTime {
    id    String   @id @default(uuid())
    start DateTime
    end   DateTime
    days  Int      @default(0) // store days as a bitfield, where bit i=1 if the time occurs on the ith day

    course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId String
}

model Task {
    id          String   @id @default(uuid())
    name        String
    completed   Boolean  @default(false)
    due         DateTime
    description String

    subtasks Subtask[]

    course   Course? @relation(fields: [courseId], references: [id], onDelete: SetNull)
    courseId String?

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}

model Subtask {
    id        String   @id @default(uuid())
    name      String
    completed Boolean  @default(false)
    due       DateTime

    task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId String
}
