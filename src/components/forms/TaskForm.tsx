'use client';

import { Close } from '../icons';
import { TaskPayload } from '@/lib/types';
import {
    dateISO,
    timeISO,
    tonightUTC,
    updateDate,
    updateTime,
} from '@/lib/date';
import { FormState } from '@/lib/hooks/useFormState';
import { createTask, updateTask } from '@/lib/actions/tasks';
import { Controller, useForm } from 'react-hook-form';
import { useCourseData } from '../providers';
import styles from './form.module.css';

const TEST_USER = '0';

const DEFAULT_TASK = {
    id: '',
    name: '',
    completed: false,
    due: tonightUTC(),
    description: '',
    subtasks: [],
    courseId: null,
    userId: '',
} satisfies TaskPayload;

type TaskFormProps = {
    state: FormState<TaskPayload>;
    onCloseClick?: () => void;
};

export default function TaskForm(props: TaskFormProps) {
    // form data managed by useForm hook
    const { register, handleSubmit, control, setValue } = useForm<TaskPayload>({
        values: props.state.mode === 'update' ? props.state.data : DEFAULT_TASK,
    });

    // reference all courses to link a task to a course
    const courses = useCourseData().data;

    if (props.state.mode === 'closed') {
        // return early if closed and render nothing
        return;
    }

    const title = props.state.mode === 'create' ? 'Add Task' : 'Modify Task';

    function onSubmit(data: Partial<TaskPayload>) {
        // common task data used when either creating or updating
        const partialTask = {
            // required task fields
            name: data.name!,
            due: data.due!,
            // optional task fields
            description: data.description ?? '',
            subtasks: data.subtasks ?? [],
            courseId: (data.courseId === '' ? null : data.courseId) ?? null,
        } satisfies Partial<TaskPayload>;

        console.log(partialTask);

        switch (props.state.mode) {
            case 'closed':
                console.error('Task form is being submitted in closed state');
                break;

            case 'create':
                createTask({
                    ...partialTask,
                    id: '', // id will be auto-generated by prisma
                    completed: false,
                    userId: TEST_USER,
                });
                break;

            case 'update':
                const initial = props.state.data;
                updateTask({
                    ...partialTask,
                    id: initial.id,
                    completed: initial.completed,
                    userId: initial.userId,
                });
                break;
        }

        // close the form after submitting
        props.onCloseClick && props.onCloseClick();
    }

    return (
        <div className={styles.fillPage}>
            <form className={styles.form} onSubmit={handleSubmit(onSubmit)}>
                <div className={styles.formHeader}>
                    <h1>{title}</h1>

                    <button
                        className={styles.closeButton}
                        type='button'
                        onClick={props.onCloseClick}
                    >
                        <Close size={30} color='white' />
                    </button>
                </div>

                <hr />

                <div className={styles.formSection}>
                    <div className={styles.fieldContainer}>
                        <label htmlFor='name'>
                            <p>Name</p>
                        </label>
                        <input
                            type='text'
                            id='name'
                            {...register('name', { required: true })}
                        />
                    </div>

                    <div className={styles.fieldContainer}>
                        <label htmlFor='course'>
                            <p>Course</p>
                        </label>

                        <select id='course' {...register('courseId')}>
                            {/* IMPORTANT: remember to convert (null <=> '') */}
                            <option value=''>None</option>

                            {courses.map((c) => (
                                <option
                                    key={c.id}
                                    value={c.id}
                                    style={{ color: c.color }}
                                >
                                    {c.name}
                                </option>
                            ))}
                        </select>
                    </div>

                    <div className={styles.fieldContainer}>
                        <label htmlFor='due'>
                            <p>Due</p>
                        </label>

                        <Controller
                            control={control}
                            name='due'
                            render={({ field }) => {
                                // TODO: extract this into a component
                                // to use a single Date object, parse it's ISO value and provide to inputs in correct format
                                // then whenever they are changed, set form data's due property as a Date object
                                const handleDateChange = (
                                    e: React.ChangeEvent<HTMLInputElement>
                                ) => {
                                    setValue(
                                        'due',
                                        updateDate(field.value, e.target.value)
                                    );
                                };

                                const handleTimeChange = (
                                    e: React.ChangeEvent<HTMLInputElement>
                                ) => {
                                    setValue(
                                        'due',
                                        updateTime(field.value, e.target.value)
                                    );
                                };

                                // for each input element, override the default value and onChange props
                                return (
                                    <>
                                        <input
                                            type='date'
                                            id='due'
                                            {...field}
                                            value={dateISO(field.value)}
                                            onChange={handleDateChange}
                                        />

                                        <input
                                            type='time'
                                            {...field}
                                            value={timeISO(field.value)}
                                            onChange={handleTimeChange}
                                        />
                                    </>
                                );
                            }}
                        />
                    </div>
                </div>

                <hr />

                {/* TODO: subtasks */}
                <div className={styles.formSection}>
                    <p>=== Subtasks here ===</p>
                </div>

                <hr />

                <div className={styles.formSection}>
                    <div className={styles.fieldContainer}>
                        <label htmlFor='description'>
                            <p>Description (optional)</p>
                        </label>

                        <textarea
                            id='description'
                            {...register('description')}
                            rows={4}
                        />
                    </div>
                </div>

                <hr />

                <button className={styles.submit} type='submit'>
                    <h3>Submit</h3>
                </button>
            </form>
        </div>
    );
}
