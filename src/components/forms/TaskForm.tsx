'use client';

import { Close, Trash } from '../icons';
import { DateTimePicker } from './DateTimePicker';
import { TaskPayload } from '@/lib/types';
import { tonightUTC } from '@/lib/date';
import { FormState } from '@/lib/hooks/useFormState';
import { createTask, updateTask } from '@/lib/actions/tasks';
import { Controller, useFieldArray, useForm } from 'react-hook-form';
import { useCourses } from '@/providers';
import { Subtask } from '@prisma/client';
import styles from './form.module.css';

const TEST_USER = '0';

const DEFAULT_TASK = {
    id: '',
    name: '',
    completed: false,
    due: tonightUTC(),
    description: '',
    subtasks: [],
    courseId: null,
    userId: '',
} satisfies TaskPayload;

const DEFAULT_SUBTASK = {
    id: '',
    name: '',
    completed: false,
    due: tonightUTC(),
    taskId: '',
} satisfies Subtask;

type TaskFormProps = {
    state: FormState<TaskPayload>;
    onCloseClick?: () => void;
};

export function TaskForm(props: TaskFormProps) {
    // form data managed by useForm hook
    const {
        register,
        handleSubmit,
        control,
        reset,
        formState: { errors },
    } = useForm<TaskPayload>({
        values: props.state.mode === 'update' ? props.state.data : DEFAULT_TASK,
    });

    // dynamic subtasks section managed by useFieldArray hook
    const subtasksField = useFieldArray({
        control,
        name: 'subtasks',
    });

    // reference all courses to link a task to a course
    const courses = useCourses().data;

    if (props.state.mode === 'closed') {
        // return early if closed and render nothing
        return;
    }

    const title = props.state.mode === 'create' ? 'Add Task' : 'Modify Task';

    function onSubmit(data: Partial<TaskPayload>) {
        // common task data used when either creating or updating
        const partialTask = {
            // required task fields
            name: data.name!,
            due: data.due!,
            // optional task fields
            description: data.description ?? '',
            subtasks: data.subtasks ?? [],
            courseId: (data.courseId === '' ? null : data.courseId) ?? null,
        } satisfies Partial<TaskPayload>;

        switch (props.state.mode) {
            case 'closed':
                console.error('Task form is being submitted in closed state');
                break;

            case 'create':
                createTask({
                    ...partialTask,
                    id: '', // id will be auto-generated by prisma
                    completed: false,
                    userId: TEST_USER,
                });
                break;

            case 'update':
                const initial = props.state.data;
                updateTask({
                    ...partialTask,
                    id: initial.id,
                    completed: initial.completed,
                    userId: initial.userId,
                });
                break;
        }

        // close the form after submitting and reset fields
        props.onCloseClick?.();
        reset();
    }

    return (
        <div className={styles.fillPage}>
            <form className={styles.form} onSubmit={handleSubmit(onSubmit)}>
                {/* header section */}
                <div className={styles.formHeader}>
                    <h1>{title}</h1>

                    <button
                        className={styles.closeButton}
                        type='button'
                        onClick={props.onCloseClick}
                    >
                        <Close size={30} color='white' />
                    </button>
                </div>

                <hr />

                {/* main task data */}
                <div className={styles.formSection}>
                    {/* name */}
                    <div className={styles.fieldContainer}>
                        <label htmlFor='name'>
                            <p>Name</p>
                        </label>

                        <input
                            type='text'
                            id='name'
                            {...register('name', {
                                required: 'Task must include a name',
                            })}
                        />

                        <p className={styles.error}>{errors.name?.message}</p>
                    </div>

                    {/* course */}
                    <div className={styles.fieldContainer}>
                        <label htmlFor='course'>
                            <p>Course</p>
                        </label>

                        <select id='course' {...register('courseId')}>
                            {/* IMPORTANT: remember to convert (null <=> '') */}
                            <option value=''>None</option>

                            {courses.map((c) => (
                                <option
                                    key={c.id}
                                    value={c.id}
                                    style={{ color: c.color }}
                                >
                                    {c.name}
                                </option>
                            ))}
                        </select>
                    </div>

                    {/* due date */}
                    <div className={styles.fieldContainer}>
                        <label htmlFor='due'>
                            <p>Due</p>
                        </label>

                        <Controller
                            control={control}
                            name='due'
                            render={({ field }) => (
                                <DateTimePicker
                                    value={field.value}
                                    onChange={field.onChange}
                                />
                            )}
                        />
                    </div>
                </div>

                <hr />

                {/* subtasks */}
                <div className={styles.formSection}>
                    <div className={styles.fieldContainer}>
                        <label>
                            <p>Subtasks</p>
                        </label>

                        {subtasksField.fields.map((field, idx) => (
                            <div key={field.id} className={styles.subtaskRow}>
                                <input
                                    type='text'
                                    className={styles.subtaskRowName}
                                    {...register(`subtasks.${idx}.name`, {
                                        required: 'Subtask must include a name',
                                    })}
                                />

                                <Controller
                                    control={control}
                                    name={`subtasks.${idx}.due`}
                                    render={({ field }) => (
                                        <DateTimePicker
                                            onChange={field.onChange}
                                            value={field.value}
                                        />
                                    )}
                                />

                                <button
                                    type='button'
                                    className={styles.closeButton}
                                    onClick={() => subtasksField.remove(idx)}
                                >
                                    <Trash color='light' size={16} />
                                </button>

                                <p
                                    key={`${field.id}ERROR`}
                                    className={styles.error}
                                >
                                    {errors.subtasks?.at?.(idx)?.name?.message}
                                </p>
                            </div>
                        ))}

                        <button
                            type='button'
                            className={styles.submit}
                            onClick={() =>
                                subtasksField.append(DEFAULT_SUBTASK)
                            }
                        >
                            +
                        </button>
                    </div>
                </div>

                <hr />

                {/* description */}
                <div className={styles.formSection}>
                    <div className={styles.fieldContainer}>
                        <label htmlFor='description'>
                            <p>Description (optional)</p>
                        </label>

                        <textarea
                            id='description'
                            {...register('description')}
                            rows={4}
                        />
                    </div>
                </div>

                <hr />

                <button className={styles.submit} type='submit'>
                    <h3>Submit</h3>
                </button>
            </form>
        </div>
    );
}
