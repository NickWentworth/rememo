'use client';

import { Trash } from '../icons';
import Button, { AddButton } from '../Button';
import { Form, FormSection, FormField, Spacer } from './structure';
import { DateTimePicker } from './comps';
import { TaskPayload } from '@/lib/types';
import { todayUTC } from '@/lib/date';
import { Subtask } from '@prisma/client';
import { useFormController } from '@/lib/hooks/useFormController';
import { useAllCourses } from '@/lib/query/courses';
import { useTaskMutations } from '@/lib/query/tasks';
import { Controller, useFieldArray, useForm } from 'react-hook-form';
import styles from './form.module.css';

const DEFAULT_TASK = {
    id: '',
    name: '',
    completed: false,
    due: todayUTC('23:59'),
    description: '',
    subtasks: [],
    courseId: null,
    course: null,
    userId: '',
} satisfies TaskPayload;

const DEFAULT_SUBTASK = {
    id: '',
    name: '',
    completed: false,
    due: todayUTC('23:59'),
    taskId: '',
} satisfies Subtask;

export const useTaskFormController = useFormController<TaskPayload>;

type TaskFormProps = {
    controller: ReturnType<typeof useTaskFormController>;
};

export function TaskForm(props: TaskFormProps) {
    const { data: courses } = useAllCourses();

    const { create: createTask, update: updateTask } = useTaskMutations();

    const {
        register,
        handleSubmit,
        control,
        reset,
        watch,
        formState: { errors },
    } = useForm<TaskPayload>({
        values:
            props.controller.state.mode === 'update'
                ? props.controller.state.data
                : DEFAULT_TASK,
    });

    const subtasksField = useFieldArray({
        control,
        name: 'subtasks',
    });

    // get selected course color for displaying in course select
    const selectedCourseId = watch('courseId');
    const selectedCourseColor = courses?.find(
        (course) => course.id === selectedCourseId
    )?.color;

    function onSubmit(data: Partial<TaskPayload>) {
        // common task data used when either creating or updating
        const partialTask = {
            // required task fields
            name: data.name!,
            due: data.due!,
            // optional task fields
            description: data.description ?? '',
            subtasks: data.subtasks ?? [],
            courseId: (data.courseId === '' ? null : data.courseId) ?? null,
            course: null,
        } satisfies Partial<TaskPayload>;

        switch (props.controller.state.mode) {
            case 'closed':
                console.error('Task form is being submitted in closed state');
                break;

            case 'create':
                createTask({
                    ...partialTask,
                    id: '', // id will be auto-generated by prisma
                    userId: '', // user id will be added after verifying authentication
                    completed: false,
                });
                break;

            case 'update':
                const initial = props.controller.state.data;
                updateTask({
                    ...partialTask,
                    id: initial.id,
                    completed: initial.completed,
                    userId: initial.userId,
                });
                break;
        }

        // close the form after submitting and reset fields
        props.controller.close();
        reset();
    }

    return (
        <Form
            controller={props.controller}
            onSubmit={handleSubmit(onSubmit)}
            title='Task'
            sections={[
                // main task data
                <FormSection>
                    <FormField label='Name'>
                        <input
                            type='text'
                            {...register('name', {
                                required: 'Task must have a name',
                            })}
                        />
                    </FormField>
                    <p className={styles.error}>{errors.name?.message}</p>

                    <Spacer />

                    <FormField label='Course'>
                        <select
                            style={{ color: selectedCourseColor }}
                            id='courseId'
                            {...register('courseId')}
                        >
                            <option value='' style={{ color: 'var(--white)' }}>
                                None
                            </option>

                            {courses?.map((course) => (
                                <option
                                    key={course.id}
                                    value={course.id}
                                    style={{ color: course.color }}
                                >
                                    {course.name}
                                </option>
                            ))}
                        </select>
                    </FormField>

                    <Spacer />

                    <FormField label='Due'>
                        <Controller
                            control={control}
                            name='due'
                            render={({ field }) => (
                                <DateTimePicker
                                    value={field.value}
                                    onChange={field.onChange}
                                />
                            )}
                        />
                    </FormField>
                </FormSection>,

                // subtasks field array
                <FormSection>
                    <p>Subtasks</p>

                    <Spacer />

                    {subtasksField.fields.flatMap((field, idx) => [
                        <div key={field.id} className={styles.subtaskRow}>
                            <input
                                type='text'
                                {...register(`subtasks.${idx}.name`, {
                                    required: 'Subtask must have a name',
                                })}
                            />

                            <Controller
                                control={control}
                                name={`subtasks.${idx}.due`}
                                render={({ field }) => (
                                    <DateTimePicker
                                        onChange={field.onChange}
                                        value={field.value}
                                    />
                                )}
                            />

                            <Button
                                type='transparent'
                                onClick={() => subtasksField.remove(idx)}
                                icon={<Trash color='light' size={16} />}
                            />
                        </div>,
                        <p key={`${field.id}error`} className={styles.error}>
                            {errors.subtasks?.at?.(idx)?.name?.message}
                        </p>,
                    ])}

                    {/* add space between bottom subtask and add button */}
                    {subtasksField.fields.length > 0 && <Spacer />}

                    <div className={styles.alignCenter}>
                        <AddButton
                            onClick={() =>
                                subtasksField.append(DEFAULT_SUBTASK)
                            }
                        />
                    </div>
                </FormSection>,

                // description
                <FormSection>
                    <FormField label='Description' optional>
                        <textarea {...register('description')} rows={4} />
                    </FormField>
                </FormSection>,
            ]}
        />
    );
}
